// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model Agent {
  id                     String     @id @default(cuid())
  email                  String     @unique
  password               String
  name                   String
  companyName            String?
  contactNumber          String?
  businessRegistration   String?
  taxId                  String?
  address                String?
  city                   String?
  role                   AgentRole  @default(AGENT)
  status                 AgentStatus @default(PENDING)
  isActive               Boolean    @default(true)
  isEmailVerified        Boolean    @default(false)
  emailVerificationToken String?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  lastLoginAt            DateTime?
  commissionRate         Decimal?   @db.Decimal(5, 2)
  totalRevenue           Decimal?   @db.Decimal(12, 2) @default(0)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt

  // Relations
  appointments           Appointment[]
  reports                Report[]
  activityLogs          ActivityLog[]
  customers             Customer[]                    // Added missing relation
  tickets               Ticket[]         @relation("TicketAgent")
  assignedTickets       Ticket[]         @relation("TicketAssignedAgent")
  followUps             FollowUp[]
  workflowsRequested    ApprovalWorkflow[] @relation("WorkflowRequester")
  workflowSteps         WorkflowStep[]   @relation("WorkflowStepApprover")
  bulkBookings          BulkBooking[]
  patientHistories      PatientHistory[] @relation("PatientHistoryAgent")
  
  @@map("agents")
}

model Doctor {
  id                String         @id @default(cuid())
  doctorId          String         @unique
  firstName         String         // Split name field
  lastName          String         // Split name field
  email             String         @unique
  specialization    String
  qualification     String
  experience        Int           // years of experience
  consultationFee   Decimal       @db.Decimal(10, 2)
  rating            Decimal?      @db.Decimal(3, 2)
  profileImage      String?
  description       String?
  languages         String[]      // Array of languages
  availableDays     String[]      // Array of available days
  isActive          Boolean       @default(true)
  hospitalId        String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

// Relations
  hospital          Hospital      @relation(fields: [hospitalId], references: [id])
  appointments      Appointment[]
  timeSlots         TimeSlot[]
  bulkBookingItems  BulkBookingItem[]
  
  @@map("doctors")
}

model Hospital {
  id              String     @id @default(cuid())
  hospitalId      String     @unique
  name            String
  address         String
  city            String
  district        String
  contactNumber   String
  email           String
  website         String?
  facilities      String[]   // Array of facilities
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  doctors           Doctor[]
  appointments      Appointment[]
  bulkBookingItems  BulkBookingItem[]
  
  @@map("hospitals")
}

model TimeSlot {
  id               String        @id @default(cuid())
  doctorId         String
  date             DateTime      @db.Date
  startTime        DateTime      @db.Time
  endTime          DateTime      @db.Time
  maxAppointments  Int           @default(20)
  currentBookings  Int           @default(0)
  isActive         Boolean       @default(true)
  consultationFee  Decimal       @db.Decimal(10, 2)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  doctor           Doctor        @relation(fields: [doctorId], references: [id])
  appointments     Appointment[]
  
  @@unique([doctorId, date, startTime])
  @@map("time_slots")
}

model Appointment {
  id                    String            @id @default(cuid())
  appointmentNumber     String            @unique
  patientName           String
  patientEmail          String
  patientPhone          String
  patientNIC            String?
  patientDateOfBirth    DateTime?
  patientGender         Gender?
  emergencyContactName  String?
  emergencyContactPhone String?
  medicalHistory        String?
  currentMedications    String?
  allergies             String?
  insuranceProvider     String?
  insurancePolicyNumber String?
  isNewPatient          Boolean           @default(true)
  
  doctorId              String
  hospitalId            String
  timeSlotId            String
  agentId               String
  customerId            String?
  
  appointmentDate       DateTime          @db.Date
  appointmentTime       DateTime          @db.Time
  estimatedWaitTime     Int?             // in minutes
  queuePosition         Int?
  
  status                AppointmentStatus @default(CONFIRMED)
  paymentStatus         PaymentStatus     @default(PENDING)
  consultationFee       Decimal           @db.Decimal(10, 2)
  agentCommission       Decimal           @db.Decimal(10, 2)
  totalAmount           Decimal           @db.Decimal(10, 2)
  
  notes                 String?
  cancellationReason    String?
  cancellationDate      DateTime?
  
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relations
  doctor                Doctor            @relation(fields: [doctorId], references: [id])
  hospital              Hospital          @relation(fields: [hospitalId], references: [id])
  timeSlot              TimeSlot          @relation(fields: [timeSlotId], references: [id])
  agent                 Agent             @relation(fields: [agentId], references: [id])
  customer              Customer?         @relation(fields: [customerId], references: [id])
  payments              Payment[]
  followUps             FollowUp[]
  bulkBookingItems      BulkBookingItem[]
  patientHistories      PatientHistory[]
  
  @@map("appointments")
}

model Payment {
  id                String        @id @default(cuid())
  appointmentId     String
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("LKR")
  paymentMethod     PaymentMethod
  transactionId     String?       @unique
  gatewayResponse   Json?
  status            PaymentStatus @default(PENDING)
  paidAt            DateTime?
  refundedAt        DateTime?
  refundAmount      Decimal?      @db.Decimal(10, 2)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  appointment       Appointment   @relation(fields: [appointmentId], references: [id])
  
  @@map("payments")
}

model Report {
  id            String       @id @default(cuid())
  title         String
  type          ReportType
  description   String?
  parameters    Json?       // Report parameters and filters
  filePath      String?     // Generated file path
  status        ReportStatus @default(PENDING)
  generatedById String
  scheduledAt   DateTime?
  completedAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  generatedBy   Agent        @relation(fields: [generatedById], references: [id])
  
  @@map("reports")
}

model ActivityLog {
  id          String    @id @default(cuid())
  agentId     String
  action      String
  entityType  String
  entityId    String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())

  // Relations
  agent       Agent     @relation(fields: [agentId], references: [id])
  
  @@map("activity_logs")
}

// Support Tickets System
model Ticket {
  id              String         @id @default(cuid())
  ticketNumber    String         @unique
  customerId      String?
  agentId         String         // Added missing agentId field
  customerName    String
  customerEmail   String
  customerPhone   String?
  title           String
  description     String
  category        TicketCategory @default(GENERAL)
  priority        TicketPriority @default(MEDIUM)
  status          TicketStatus   @default(OPEN)
  assignedAgentId String?
  resolutionNotes String?
  satisfactionRating Int?
  estimatedResolution DateTime?
  resolvedAt      DateTime?
  closedAt        DateTime?
  tags            String[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  agent           Agent          @relation("TicketAgent", fields: [agentId], references: [id])
  assignedAgent   Agent?         @relation("TicketAssignedAgent", fields: [assignedAgentId], references: [id])
  customer        Customer?      @relation(fields: [customerId], references: [id])
  messages        TicketMessage[]
  
  @@map("tickets")
}

model TicketMessage {
  id          String            @id @default(cuid())
  ticketId    String
  senderId    String
  senderName  String
  senderType  MessageSenderType
  message     String
  attachments String[]
  createdAt   DateTime          @default(now())

  // Relations
  ticket      Ticket            @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  @@map("ticket_messages")
}

// Customer Management System
model Customer {
  id                String              @id @default(cuid())
  agentId           String              // Added missing agentId field
  firstName         String
  lastName          String
  email             String              @unique
  phone             String
  dateOfBirth       DateTime?
  gender            Gender?
  address           String?             // Simplified to string for now
  emergencyContact  String?             // Simplified to string for now
  medicalHistory    String?             // Added field expected by code
  insurance         Json?               // Insurance information object
  preferences       Json?               // Customer preferences object
  tags              String[]
  status            CustomerStatus      @default(ACTIVE)
  registrationDate  DateTime            @default(now()) // Added field
  lastVisit         DateTime?           // Added field
  totalAppointments Int                 @default(0)
  customerValue     Decimal             @db.Decimal(12, 2) @default(0)
  satisfaction      Decimal?            @db.Decimal(3, 2)
  lastAppointmentAt DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  agent             Agent               @relation(fields: [agentId], references: [id])
  appointments      Appointment[]
  tickets           Ticket[]
  followUps         FollowUp[]
  patientHistories  PatientHistory[]
  bulkBookings      BulkBooking[]       // Added missing relation
  
  @@map("customers")
}

// Follow-up Scheduling
model FollowUp {
  id                String              @id @default(cuid())
  customerId        String
  appointmentId     String?
  agentId           String
  type              FollowUpType
  priority          FollowUpPriority    @default(MEDIUM)
  status            FollowUpStatus      @default(SCHEDULED)
  title             String
  description       String?
  scheduledDate     DateTime
  completedDate     DateTime?
  notes             String?
  outcome           String?
  nextFollowUpDate  DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  customer          Customer            @relation(fields: [customerId], references: [id])
  appointment       Appointment?        @relation(fields: [appointmentId], references: [id])
  agent             Agent               @relation(fields: [agentId], references: [id])
  
  @@map("follow_ups")
}

// Approval Workflows
model ApprovalWorkflow {
  id              String              @id @default(cuid())
  requestType     WorkflowType
  requestId       String              // ID of the entity being approved (appointment, refund, etc.)
  requesterId     String              // Agent who made the request
  currentStep     Int                 @default(1)
  totalSteps      Int
  status          WorkflowStatus      @default(PENDING)
  priority        WorkflowPriority    @default(MEDIUM)
  title           String
  description     String?
  justification   String?             // Added field expected by code
  estimatedValue  Decimal?            @db.Decimal(12, 2) // Added field expected by code
  cancellationReason String?          // Added field expected by code
  requestData     Json                // Original request data
  dueDate         DateTime?
  completedAt     DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  requester       Agent               @relation("WorkflowRequester", fields: [requesterId], references: [id])
  steps           WorkflowStep[]
  
  @@map("approval_workflows")
}

model WorkflowStep {
  id              String              @id @default(cuid())
  workflowId      String
  stepOrder       Int                 // Renamed from stepNumber to match code
  stepName        String
  approverId      String?             // Renamed from assignedAgentId to match code
  status          StepStatus          @default(PENDING)
  action          String?             // approve, reject, request_info
  comments        String?
  approverNotes   String?             // Added field expected by code
  processedAt     DateTime?
  processedBy     String?             // Added field expected by code
  description     String?             // Added field expected by code
  isOptional      Boolean             @default(false) // Added field expected by code
  dueDate         DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  workflow        ApprovalWorkflow    @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  approver        Agent?              @relation("WorkflowStepApprover", fields: [approverId], references: [id])
  
  @@unique([workflowId, stepOrder])
  @@map("workflow_steps")
}

// Bulk Booking System
model BulkBooking {
  id              String              @id @default(cuid())
  customerId      String              // Added missing field
  batchNumber     String              @unique
  batchName       String              // Added missing field
  description     String?             // Added missing field
  agentId         String
  totalItems      Int                 // Renamed from totalSlots
  successfulItems Int                 @default(0) // Renamed from successfulBookings
  failedItems     Int                 @default(0) // Renamed from failedBookings
  status          BulkBookingStatus   @default(PROCESSING)
  notes           String?             // Added missing field
  csvFile         String?
  errorLog        String?
  completedAt     DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  agent           Agent               @relation(fields: [agentId], references: [id])
  customer        Customer            @relation(fields: [customerId], references: [id])
  items           BulkBookingItem[]   // Renamed from bookings
  
  @@map("bulk_bookings")
}

model BulkBookingItem {
  id              String              @id @default(cuid())
  bulkBookingId   String
  sequenceNumber  Int                 // Added missing field
  appointmentId   String?
  patientName     String
  patientEmail    String
  patientPhone    String
  doctorId        String
  hospitalId      String
  appointmentDate DateTime
  appointmentTime String              // Changed to String to match usage
  consultationFee Decimal             @db.Decimal(10, 2) // Added missing field
  notes           String?             // Added missing field
  status          BulkItemStatus      @default(PENDING)
  errorMessage    String?
  processedAt     DateTime?           // Added missing field
  createdAt       DateTime            @default(now())

  // Relations
  bulkBooking     BulkBooking         @relation(fields: [bulkBookingId], references: [id], onDelete: Cascade)
  appointment     Appointment?        @relation(fields: [appointmentId], references: [id])
  doctor          Doctor              @relation(fields: [doctorId], references: [id])
  hospital        Hospital            @relation(fields: [hospitalId], references: [id])
  
  @@map("bulk_booking_items")
}

// Patient History Tracking
model PatientHistory {
  id                    String              @id @default(cuid())
  customerId            String
  appointmentId         String
  agentId               String              // Added missing field
  visitDate             DateTime
  chiefComplaint        String              // Added missing field
  diagnosis             String?
  treatmentPlan         String?             // Renamed from treatment
  medications           String?             // Renamed from prescription  
  followUpInstructions  String?             // Added missing field
  vitalSigns            Json?               // Added missing field
  labResults            Json?               // Added missing field
  notes                 String?
  followUpRequired      Boolean             @default(false)
  followUpDate          DateTime?
  attachments           String[]
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Relations
  customer        Customer            @relation(fields: [customerId], references: [id])
  appointment     Appointment         @relation(fields: [appointmentId], references: [id])
  agent           Agent               @relation("PatientHistoryAgent", fields: [agentId], references: [id])
  
  @@map("patient_histories")
}

// Enums
enum AgentRole {
  ADMIN
  SUPERVISOR
  AGENT
}

enum AgentStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  RESCHEDULED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CASH
  MOBILE_PAYMENT
}

enum ReportType {
  APPOINTMENT_SUMMARY
  REVENUE_ANALYSIS
  AGENT_PERFORMANCE
  CUSTOMER_SATISFACTION
  OPERATIONAL_METRICS
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
}

// Support Ticket Enums
enum TicketCategory {
  TECHNICAL
  BILLING
  APPOINTMENT
  COMPLAINT
  GENERAL
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  RESOLVED
  CLOSED
}

enum MessageSenderType {
  CUSTOMER
  AGENT
  SYSTEM
}

// Customer Enums
enum CustomerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// Follow-up Enums
enum FollowUpType {
  POST_APPOINTMENT
  MEDICATION_REMINDER
  WELLNESS_CHECK
  APPOINTMENT_REMINDER
  PAYMENT_FOLLOW_UP
  SATISFACTION_SURVEY
}

enum FollowUpPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum FollowUpStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

// Approval Workflow Enums
enum WorkflowType {
  APPOINTMENT_CANCELLATION
  REFUND_REQUEST
  SPECIAL_DISCOUNT
  EMERGENCY_BOOKING
  BULK_BOOKING_APPROVAL
  CUSTOMER_COMPLAINT
}

enum WorkflowStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  CANCELLED
}

enum WorkflowPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  SKIPPED
}

// Bulk Booking Enums
enum BulkBookingStatus {
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum BulkItemStatus {
  PENDING
  SUCCESS
  FAILED
}